#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define MOD 26
int modInverse(int a, int m) {
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1)
            return x;
    }
    return -1; 
}
char decryptChar(char c, int a, int b) {
    if (isalpha(c)) {
        char base = islower(c) ? 'a' : 'A';
        int a_inv = modInverse(a, MOD); 
        return (a_inv * (c - base - b + MOD)) % MOD + base;
    }
    return c;
}
void decryptText(const char *ciphertext, int a, int b, char *plaintext) {
    for (int i = 0; ciphertext[i] != '\0'; i++) {
        plaintext[i] = decryptChar(ciphertext[i], a, b);
    }
    plaintext[strlen(ciphertext)] = '\0';
}
int main() {
    char ciphertext[100], plaintext[100];
    int a, b;
    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0'; 
    int p1 = 4, c1 = 1; 
    int p2 = 19, c2 = 20; 
    a = (c1 - c2 + MOD) * modInverse(p1 - p2 + MOD, MOD) % MOD;
    b = (c1 - a * p1 + MOD) % MOD;
    printf("Determined values: a = %d, b = %d\n", a, b);
    decryptText(ciphertext, a, b, plaintext);
    printf("Decrypted Text: %s\n", plaintext);
    return 0;
}
