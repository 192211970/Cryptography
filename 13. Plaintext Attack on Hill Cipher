#include <stdio.h>
#include <math.h>
#define MOD 26

int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1) return x;
    }
    return -1;
}

int determinant(int matrix[2][2]) {
    return (matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]);
}


void inverseMatrix(int matrix[2][2], int inverse[2][2]) {
    int det = determinant(matrix);
    int detInv = modInverse(det % MOD, MOD);
    if (detInv < 0) detInv += MOD;

    
    inverse[0][0] = (matrix[1][1] * detInv) % MOD;
    inverse[0][1] = (-matrix[0][1] * detInv + MOD) % MOD;
    inverse[1][0] = (-matrix[1][0] * detInv + MOD) % MOD;
    inverse[1][1] = (matrix[0][0] * detInv) % MOD;
}

void matrixMultiply(int a[2][2], int b[2][2], int result[2][2]) {
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            result[i][j] = 0;
            for (int k = 0; k < 2; k++) {
                result[i][j] += a[i][k] * b[k][j];
            }
            result[i][j] %= MOD;
        }
    }
}

void recoverKeyMatrix(int plaintext[2][2], int ciphertext[2][2], int key[2][2]) {
    int inversePlaintext[2][2];
    inverseMatrix(plaintext, inversePlaintext);
    matrixMultiply(ciphertext, inversePlaintext, key);
}

int main() {
    int plaintext[2][2] = {{7, 4}, {11, 19}}; 
    int ciphertext[2][2] = {{8, 5}, {14, 20}};

    int key[2][2];
    recoverKeyMatrix(plaintext, ciphertext, key);

    printf("Recovered Key Matrix:\n");
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            printf("%d ", key[i][j]);
        }
        printf("\n");
    }

    return 0;
}
