#include <stdio.h>
#include <string.h>

#define BLOCK_SIZE 8

void xor_blocks(unsigned char *a, unsigned char *b, unsigned char *result) {
    for (int i = 0; i < BLOCK_SIZE; i++) result[i] = a[i] ^ b[i];
}

int pad_message(unsigned char *msg, int len) {
    int pad = BLOCK_SIZE - (len % BLOCK_SIZE);
    memset(msg + len, 0x00, pad - 1);
    msg[len + pad - 1] = 0x80; 
    return len + pad;
}

void ecb(unsigned char *data, unsigned char *out, int len, unsigned char *key) {
    for (int i = 0; i < len; i += BLOCK_SIZE) xor_blocks(&data[i], key, &out[i]);
}

void cbc(unsigned char *data, unsigned char *out, int len, unsigned char *key, unsigned char *iv, int decrypt) {
    unsigned char temp[BLOCK_SIZE];
    memcpy(temp, iv, BLOCK_SIZE);
    for (int i = 0; i < len; i += BLOCK_SIZE) {
        if (!decrypt) {
            xor_blocks(&data[i], temp, temp);
            xor_blocks(temp, key, &out[i]);
            memcpy(temp, &out[i], BLOCK_SIZE);
        } else {
            unsigned char prev[BLOCK_SIZE];
            memcpy(prev, &data[i], BLOCK_SIZE);
            xor_blocks(&data[i], key, temp);
            xor_blocks(temp, temp, &out[i]);
            memcpy(temp, prev, BLOCK_SIZE);
        }
    }
}

void cfb(unsigned char *data, unsigned char *out, int len, unsigned char *key, unsigned char *iv) {
    unsigned char temp[BLOCK_SIZE];
    memcpy(temp, iv, BLOCK_SIZE);
    for (int i = 0; i < len; i += BLOCK_SIZE) {
        xor_blocks(temp, key, temp);
        xor_blocks(&data[i], temp, &out[i]);
        memcpy(temp, &out[i], BLOCK_SIZE);
    }
}

int main() {
    unsigned char plaintext[64] = "Example plaintext for encryption modes!";
    unsigned char key[BLOCK_SIZE] = {'s', 'e', 'c', 'r', 'e', 't', '_', 'k'}; 
    unsigned char iv[BLOCK_SIZE] = {'i', 'n', 'i', 't', '_', 'v', 'e', 'c'};  
    unsigned char ciphertext[64] = {0}, decrypted[64] = {0};
    int len = pad_message(plaintext, strlen((char *)plaintext));

    printf("Original: %s\n", plaintext);

    
    ecb(plaintext, ciphertext, len, key);
    ecb(ciphertext, decrypted, len, key);
    printf("ECB Decrypted: %s\n", decrypted);

    
    memset(ciphertext, 0, sizeof(ciphertext));
    memset(decrypted, 0, sizeof(decrypted));
    cbc(plaintext, ciphertext, len, key, iv, 0); 
    cbc(ciphertext, decrypted, len, key, iv, 1); 
    printf("CBC Decrypted: %s\n", decrypted);

    
    memset(ciphertext, 0, sizeof(ciphertext));
    memset(decrypted, 0, sizeof(decrypted));
    cfb(plaintext, ciphertext, len, key, iv); 
    cfb(ciphertext, decrypted, len, key, iv); 
    printf("CFB Decrypted: %s\n", decrypted);

    return 0;
}
