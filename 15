#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

#define ALPHABET_SIZE 26
#define MAX_TEXT_LEN 1000

const double ENGLISH_FREQ[] = {8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015, 6.094, 
                                6.966, 0.153, 0.772, 4.025, 2.406, 6.749, 7.507, 1.929, 
                                0.095, 5.987, 6.327, 9.056, 2.758, 0.978, 2.360, 0.150, 
                                1.974, 0.074};

typedef struct {
    char text[MAX_TEXT_LEN];
    double score;
} Candidate;

void decrypt(const char *ciphertext, char *plaintext, int key) {
    for (int i = 0; ciphertext[i]; i++) 
        plaintext[i] = isalpha(ciphertext[i]) ? (tolower(ciphertext[i]) - 'a' - key + ALPHABET_SIZE) % ALPHABET_SIZE + 'a' : ciphertext[i];
    plaintext[strlen(ciphertext)] = '\0';
}

double computeScore(const char *text) {
    int count[ALPHABET_SIZE] = {0}, total = 0;
    double score = 0;
    for (int i = 0; text[i]; i++) 
        if (isalpha(text[i])) count[text[i] - 'a']++, total++;
    for (int i = 0; i < ALPHABET_SIZE; i++) 
        score += (total ? (100.0 * count[i] / total) : 0) * ENGLISH_FREQ[i];
    return score;
}

int compare(const void *a, const void *b) {
    return ((Candidate *)b)->score - ((Candidate *)a)->score;
}

int main() {
    char ciphertext[MAX_TEXT_LEN], plaintext[MAX_TEXT_LEN];
    int topN;
    Candidate candidates[ALPHABET_SIZE];

    printf("Enter ciphertext: ");
    fgets(ciphertext, MAX_TEXT_LEN, stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0';

    printf("Enter top N results to display: ");
    scanf("%d", &topN);

    for (int key = 0; key < ALPHABET_SIZE; key++) {
        decrypt(ciphertext, plaintext, key);
        strcpy(candidates[key].text, plaintext);
        candidates[key].score = computeScore(plaintext);
    }

    qsort(candidates, ALPHABET_SIZE, sizeof(Candidate), compare);

    for (int i = 0; i < topN && i < ALPHABET_SIZE; i++) 
        printf("Score: %.2f, Text: %s\n", candidates[i].score, candidates[i].text);

    return 0;
}
