#include <stdio.h>
#include <stdint.h>
#include <string.h>
void xorBlocks(uint8_t *block1, uint8_t *block2, uint8_t *result, size_t len) {
    for (size_t i = 0; i < len; i++) {
        result[i] = block1[i] ^ block2[i];
    }
}
void blockCipher(uint8_t *key, uint8_t *input, uint8_t *output, size_t len) {
    xorBlocks(input, key, output, len);
}

int main() {
    size_t blockSize = 16;
    uint8_t key[blockSize], message[blockSize], mac[blockSize], secondBlock[blockSize], macForTwoBlocks[blockSize];

    
    memset(key, 0x01, blockSize);     
    memset(message, 0xAB, blockSize); 
    blockCipher(key, message, mac, blockSize);
    printf("MAC for one-block message X: ");
    for (size_t i = 0; i < blockSize; i++) printf("%02X", mac[i]);
    printf("\n");
    xorBlocks(message, mac, secondBlock, blockSize);
    uint8_t intermediate[blockSize];
    blockCipher(key, message, intermediate, blockSize); 
    xorBlocks(secondBlock, intermediate, intermediate, blockSize); 
    blockCipher(key, intermediate, macForTwoBlocks, blockSize); 

    printf("MAC for two-block message X || (X ? MAC): ");
    for (size_t i = 0; i < blockSize; i++) printf("%02X", macForTwoBlocks[i]);
    printf("\n");

    return 0;
}
